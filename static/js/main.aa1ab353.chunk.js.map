{"version":3,"sources":["components/minter/Cover.js","components/ui/Notifications.js","utils/index.js","utils/constants.js","components/ui/Identicon.js","components/Wallet.js","hooks/useContract.js","utils/minter.js","components/minter/nfts/Add.js","components/minter/nfts/Card.js","components/ui/Loader.js","components/minter/nfts/index.js","App.js","hooks/useBalance.js","hooks/useMinterContract.js","hooks/useMarketplaceContract.js","reportWebVitals.js","index.js"],"names":["Cover","name","coverImg","connect","className","style","background","minHeight","maxWidth","src","alt","Button","onClick","catch","e","console","log","variant","defaultProps","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","DefaultProps","truncateAddress","address","slice","length","formatBigNumber","num","shiftedBy","toFixed","Identicon","size","rest","ref","useRef","useEffect","current","innerHTML","appendChild","Jazzicon","parseInt","width","height","Wallet","amount","symbol","destroy","Dropdown","Toggle","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","useContract","abi","contractAddress","useContractKit","getConnectedKit","useState","contract","setContract","getContract","useCallback","a","kit","web3","eth","Contract","client","ipfsHttpClient","createNft","minterContract","marketplaceContract","performActions","price","description","ipfsImage","ownerAddress","attributes","defaultAccount","data","JSON","stringify","image","owner","add","added","url","path","methods","mint","send","from","transaction","sneakerCount","BigNumber","events","Transfer","returnValues","tokenId","sneakerPrice","ethers","utils","parseUnits","String","approve","NFTMarketplaceContractAddress","NFTMarketplace","listSneaker","MyNFTContractAddress","MyNFT","uploadToIpfs","file","files","progress","prog","getNfts","nfts","getSneakerCount","call","nftsLength","i","nft","Promise","resolve","getSneaker","sneaker","tokenURI","res","ownerOf","fetchNftMeta","meta","index","seller","sold","push","Number","all","ipfsUrl","axios","get","purchaseItem","buySneaker","value","error","COLORS","CATEGORIES","AddNfts","save","setName","setPrice","setIpfsImage","setDescription","setAttributes","show","setShow","handleClose","setAttributesFunc","trait_type","attributeObject","arr","findIndex","el","oldArray","Modal","onHide","centered","Header","closeButton","Title","Body","Form","FloatingLabel","controlId","label","Control","type","placeholder","onChange","imageUrl","alert","Label","hidden","map","color","toLowerCase","category","Footer","disabled","NftCard","isSold","isOwner","Col","Card","Badge","bg","objectFit","Text","Row","attribute","key","Loader","role","NftList","setNfts","loading","setLoading","getAssets","allNfts","addNft","toast","buy","Add","xs","sm","lg","_nft","App","balance","setBalance","getBalance","getTotalBalance","useBalance","MyNFTAbi","NFTMarketplaceAbi","Container","fluid","Nav","CELO","updateBalance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","document","getElementById"],"mappings":"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","file":"static/js/main.aa1ab353.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\n\nconst Cover = ({ name, coverImg, connect }) => {\n  if (name) {\n    return (\n      <div\n        className=\"d-flex justify-content-center flex-column text-center \"\n        style={{ background: \"#000\", minHeight: \"100vh\" }}\n      >\n        <div className=\"mt-auto text-light mb-5\">\n          <div\n            className=\" ratio ratio-1x1 mx-auto mb-2\"\n            style={{ maxWidth: \"320px\" }}\n          >\n            <img src={coverImg} alt=\"\" />\n          </div>\n          <h1>{name}</h1>\n          <p>Please connect your wallet to continue.</p>\n          <Button\n            onClick={() => connect().catch((e) => console.log(e))}\n            variant=\"outline-light\"\n            className=\"rounded-pill px-3 mt-3\"\n          >\n            Connect Wallet\n          </Button>\n        </div>\n\n        <p className=\"mt-auto text-secondary\">Powered by Celo</p>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nCover.propTypes = {\n  name: PropTypes.string,\n};\n\nCover.defaultProps = {\n  name: \"\",\n};\n\nexport default Cover;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ToastContainer } from \"react-toastify\";\n\nconst Notification = () => (\n  <ToastContainer\n    position=\"bottom-center\"\n    autoClose={5000}\n    hideProgressBar\n    newestOnTop\n    closeOnClick\n    rtl={false}\n    pauseOnFocusLoss\n    draggable={false}\n    pauseOnHover\n  />\n);\n\nconst NotificationSuccess = ({ text }) => (\n  <div>\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst NotificationError = ({ text }) => (\n  <div>\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst Props = {\n  text: PropTypes.string,\n};\n\nconst DefaultProps = {\n  text: \"\",\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport { Notification, NotificationSuccess, NotificationError };\n","import {ERC20_DECIMALS} from \"./constants\";\n\n// format a wallet address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 4, address.length);\n}\n\n// convert from big number\nexport const formatBigNumber = (num) => {\n    if (!num) return\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\n}","const ERC20_DECIMALS = 18;\nexport { ERC20_DECIMALS };\n","import { useEffect, useRef } from \"react\";\nimport Jazzicon from \"@metamask/jazzicon\";\n\nexport default function Identicon({ address, size, ...rest }) {\n  const ref = useRef();\n\n  useEffect(() => {\n    if (address && ref.current) {\n      ref.current.innerHTML = \"\";\n      ref.current.appendChild(\n        Jazzicon(size, parseInt(address.slice(2, 10), 16))\n      );\n    }\n  }, [address, size]);\n\n  return (\n    <div {...rest}>\n      <div ref={ref} style={{ width: `${size}px`, height: `${size}px` }} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Dropdown, Stack, Spinner } from \"react-bootstrap\";\nimport { formatBigNumber, truncateAddress } from \"./../utils\";\nimport Identicon from \"./ui/Identicon\";\n\nconst Wallet = ({ address, amount, symbol, destroy }) => {\n  if (address) {\n    return (\n      <>\n        <Dropdown>\n          <Dropdown.Toggle\n            variant=\"light\"\n            align=\"end\"\n            id=\"dropdown-basic\"\n            className=\"d-flex align-items-center border rounded-pill py-1\"\n          >\n            {amount ? (\n              <>\n                {formatBigNumber(amount)}{\" \"}\n                <span className=\"ms-1\"> {symbol}</span>\n              </>\n            ) : (\n              <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\" />\n            )}\n            <Identicon address={address} size={28} className=\"ms-2 me-1\" />\n          </Dropdown.Toggle>\n\n          <Dropdown.Menu className=\"shadow-lg border-0\">\n            <Dropdown.Item\n              href={`https://alfajores-blockscout.celo-testnet.org/address/${address}/transactions`}\n              target=\"_blank\"\n            >\n              <Stack direction=\"horizontal\" gap={2}>\n                <i className=\"bi bi-person-circle fs-4\" />\n                <span className=\"font-monospace\">\n                  {truncateAddress(address)}\n                </span>\n              </Stack>\n            </Dropdown.Item>\n            <Dropdown.Divider />\n            <Dropdown.Item\n              as=\"button\"\n              className=\"d-flex align-items-center\"\n              onClick={() => {\n                destroy();\n              }}\n            >\n              <i className=\"bi bi-box-arrow-right me-2 fs-4\" />\n              Disconnect\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n      </>\n    );\n  }\n\n  return null;\n};\n\nexport default Wallet;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useContractKit } from '@celo-tools/use-contractkit';\n\nexport const useContract = (abi, contractAddress) => {\n  const { getConnectedKit, address } = useContractKit();\n  const [contract, setContract] = useState(null);\n\n  const getContract = useCallback(async () => {\n    const kit = await getConnectedKit();\n\n    // get a contract interface to interact with\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\n  }, [getConnectedKit, abi, contractAddress]);\n\n  useEffect(() => {\n    if (address) getContract();\n  }, [address, getContract]);\n\n  return contract;\n};","import { create as ipfsHttpClient } from \"ipfs-http-client\";\nimport axios from \"axios\";\nimport MyNFTContractAddress from \"../contracts/MyNFT-address.json\";\nimport NFTMarketplaceContractAddress from \"../contracts/NFTMarketplace-address.json\";\nimport { BigNumber, ethers } from \"ethers\";\n\n// initialize IPFS\nconst client = ipfsHttpClient(\"https://ipfs.infura.io:5001/api/v0\");\n\n// mint an NFT\nexport const createNft = async (\n  minterContract,\n  marketplaceContract,\n  performActions,\n  { name, price, description, ipfsImage, ownerAddress, attributes }\n) => {\n  await performActions(async (kit) => {\n    if (!name || !description || !ipfsImage) return;\n    const { defaultAccount } = kit;\n\n    // convert NFT metadata to JSON format\n    const data = JSON.stringify({\n      name,\n      description,\n      image: ipfsImage,\n      owner: defaultAccount,\n      attributes,\n    });\n\n    try {\n      // save NFT metadata to IPFS\n      const added = await client.add(data);\n\n      // IPFS url for uploaded metadata\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`;\n\n      // mint the NFT and save the IPFS url to the blockchain\n      let transaction = await minterContract.methods\n        .mint(url)\n        .send({ from: defaultAccount });\n\n      let sneakerCount = BigNumber.from(\n        transaction.events.Transfer.returnValues.tokenId\n      );\n\n      const sneakerPrice = ethers.utils.parseUnits(String(price), \"ether\");\n      console.log(sneakerPrice);\n\n      await minterContract.methods\n        .approve(NFTMarketplaceContractAddress.NFTMarketplace, sneakerCount)\n        .send({ from: kit.defaultAccount });\n\n      await marketplaceContract.methods\n        .listSneaker(MyNFTContractAddress.MyNFT, sneakerCount, sneakerPrice)\n        .send({ from: defaultAccount });\n\n      return transaction;\n    } catch (error) {\n      console.log(\"Error uploading file: \", error);\n    }\n  });\n};\n\n// function to upload a file to IPFS\nexport const uploadToIpfs = async (e) => {\n  const file = e.target.files[0];\n  if (!file) return;\n  try {\n    const added = await client.add(file, {\n      progress: (prog) => console.log(`received: ${prog}`),\n    });\n    return `https://ipfs.infura.io/ipfs/${added.path}`;\n  } catch (error) {\n    console.log(\"Error uploading file: \", error);\n  }\n};\n\n// fetch all NFTs on the smart contract\nexport const getNfts = async (minterContract, marketplaceContract) => {\n  try {\n    const nfts = [];\n    const nftsLength = await marketplaceContract.methods\n      .getSneakerCount()\n      .call();\n\n    // contract starts minting from index 1\n    for (let i = 1; i <= Number(nftsLength); i++) {\n      const nft = new Promise(async (resolve) => {\n        const sneaker = await marketplaceContract.methods.getSneaker(i).call();\n        const res = await minterContract.methods\n          .tokenURI(sneaker.tokenId)\n          .call();\n        const owner = await minterContract.methods\n          .ownerOf(sneaker.tokenId)\n          .call();\n\n        const meta = await fetchNftMeta(res);\n        resolve({\n          index: i,\n          owner,\n          nft: sneaker.nft,\n          tokenId: sneaker.tokenId,\n          price: sneaker.price,\n          seller: sneaker.seller,\n          sold: sneaker.sold,\n          name: meta.data.name,\n          image: meta.data.image,\n          description: meta.data.description,\n          attributes: meta.data.attributes,\n        });\n      });\n      nfts.push(nft);\n    }\n    return Promise.all(nfts);\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\n// get the metedata for an NFT from IPFS\nexport const fetchNftMeta = async (ipfsUrl) => {\n  try {\n    if (!ipfsUrl) return null;\n    const meta = await axios.get(ipfsUrl);\n    return meta;\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\n// get the owner address of an NFT\nexport const fetchNftOwner = async (minterContract, index) => {\n  try {\n    return await minterContract.methods.ownerOf(index).call();\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\n// get the address that deployed the NFT contract\nexport const fetchNftContractOwner = async (minterContract) => {\n  try {\n    let owner = await minterContract.methods.owner().call();\n    return owner;\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\nexport const purchaseItem = async (\n  minterContract,\n  marketplaceContract,\n  performActions,\n  index,\n  tokenId\n) => {\n  try {\n    await performActions(async (kit) => {\n      try {\n        console.log(marketplaceContract, index);\n        const { defaultAccount } = kit;\n        const sneaker = await marketplaceContract.methods\n          .getSneaker(index)\n          .call();\n        await marketplaceContract.methods\n          .buySneaker(index)\n          .send({ from: defaultAccount, value: sneaker.price });\n      } catch (error) {\n        console.log({ error });\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Modal, Form, FloatingLabel } from \"react-bootstrap\";\nimport { uploadToIpfs } from \"../../../utils/minter\";\n\n// basic attributes that can be added to NFT\nconst COLORS = [\"Red\", \"Green\", \"Blue\", \"Cyan\", \"Yellow\", \"Purple\"];\nconst CATEGORIES = [\"High top\", \"Trainer\", \"Casual\"];\n\nconst AddNfts = ({ save, address }) => {\n  const [name, setName] = useState(\"\");\n  const [price, setPrice] = useState(0);\n  const [ipfsImage, setIpfsImage] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n\n  //store attributes of an NFT\n  const [attributes, setAttributes] = useState([]);\n  const [show, setShow] = useState(false);\n\n  // check if all form data has been filled\n  const isFormFilled = () =>\n    name && ipfsImage && description && attributes.length === 2;\n\n  // close the popup modal\n  const handleClose = () => {\n    setShow(false);\n    setAttributes([]);\n  };\n\n  // display the popup modal\n  const handleShow = () => setShow(true);\n\n  // add an attribute to an NFT\n  const setAttributesFunc = (e, trait_type) => {\n    const { value } = e.target;\n    const attributeObject = {\n      trait_type,\n      value,\n    };\n    const arr = attributes;\n\n    // check if attribute already exists\n    const index = arr.findIndex((el) => el.trait_type === trait_type);\n\n    if (index >= 0) {\n      // update the existing attribute\n      arr[index] = {\n        trait_type,\n        value,\n      };\n      setAttributes(arr);\n      return;\n    }\n\n    // add a new attribute\n    setAttributes((oldArray) => [...oldArray, attributeObject]);\n  };\n\n  return (\n    <>\n      <Button\n        onClick={handleShow}\n        variant=\"dark\"\n        className=\"rounded-pill px-0\"\n        style={{ width: \"38px\" }}\n      >\n        <i className=\"bi bi-plus\"></i>\n      </Button>\n\n      {/* Modal */}\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>Create NFT</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <Form>\n            <FloatingLabel\n              controlId=\"inputLocation\"\n              label=\"Name\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Name of NFT\"\n                onChange={(e) => {\n                  setName(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <FloatingLabel\n              controlId=\"inputDescription\"\n              label=\"Description\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                as=\"textarea\"\n                placeholder=\"description\"\n                style={{ height: \"80px\" }}\n                onChange={(e) => {\n                  setDescription(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <FloatingLabel\n              controlId=\"inputPrice\"\n              label=\"Price\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                as=\"textarea\"\n                placeholder=\"Price\"\n                style={{ height: \"80px\" }}\n                onChange={(e) => {\n                  setPrice(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <Form.Control\n              type=\"file\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                const imageUrl = await uploadToIpfs(e);\n                if (!imageUrl) {\n                  alert(\"failed to upload image\");\n                  return;\n                }\n                setIpfsImage(imageUrl);\n              }}\n              placeholder=\"Product name\"\n            ></Form.Control>\n            <Form.Label>\n              <h5>Properties</h5>\n            </Form.Label>\n\n            <Form.Control\n              as=\"select\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                setAttributesFunc(e, \"color\");\n              }}\n              placeholder=\"Color\"\n            >\n              <option hidden>Sneaker Color</option>\n              {COLORS.map((color) => (\n                <option\n                  key={`color-${color.toLowerCase()}`}\n                  value={color.toLowerCase()}\n                >\n                  {color}\n                </option>\n              ))}\n            </Form.Control>\n\n            <Form.Control\n              as=\"select\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                setAttributesFunc(e, \"category\");\n              }}\n              placeholder=\"Sneaker Category\"\n            >\n              <option hidden>Category</option>\n              {CATEGORIES.map((category) => (\n                <option\n                  key={`caegory-${category.toLowerCase()}`}\n                  value={category.toLowerCase()}\n                >\n                  {category}\n                </option>\n              ))}\n            </Form.Control>\n          </Form>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\n            Close\n          </Button>\n\n          <Button\n            variant=\"dark\"\n            disabled={!isFormFilled()}\n            onClick={() => {\n              save({\n                name,\n                price,\n                ipfsImage,\n                description,\n                ownerAddress: address,\n                attributes,\n              });\n              handleClose();\n            }}\n          >\n            Create NFT\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nAddNfts.propTypes = {\n  // props passed into this component\n  save: PropTypes.func.isRequired,\n  address: PropTypes.string.isRequired,\n};\n\nexport default AddNfts;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, Col, Badge, Stack, Row } from \"react-bootstrap\";\nimport { truncateAddress } from \"../../../utils\";\nimport Identicon from \"../../ui/Identicon\";\n\nconst NftCard = ({ nft, purchaseItem, isSold, isOwner }) => {\n  const { owner, price, image, description, name, index, attributes } = nft;\n\n  return (\n    <Col key={index}>\n      <Card className=\" h-100\">\n        <Card.Header>\n          <Stack direction=\"horizontal\" gap={2}>\n            <Identicon address={owner} size={28} />\n            <span className=\"font-monospace text-secondary\">\n              {truncateAddress(owner)}\n            </span>\n            <Badge bg=\"secondary\" className=\"ms-auto\">\n              {index} ID\n            </Badge>\n            <Badge bg=\"secondary\" className=\"ms-auto\">\n              {price / 10 ** 18} CELO\n            </Badge>\n          </Stack>\n        </Card.Header>\n\n        <div className=\" ratio ratio-4x3\">\n          <img src={image} alt={description} style={{ objectFit: \"cover\" }} />\n        </div>\n\n        <Card.Body className=\"d-flex  flex-column text-center\">\n          <Card.Title>{name}</Card.Title>\n          <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\n          <div>\n            <Row className=\"mt-2\">\n              {attributes.map((attribute, key) => (\n                <Col key={key}>\n                  <div className=\"border rounded bg-light\">\n                    <div className=\"text-secondary fw-lighter small text-capitalize\">\n                      {attribute.trait_type}\n                    </div>\n                    <div className=\"text-secondary text-capitalize font-monospace\">\n                      {attribute.value}\n                    </div>\n                  </div>\n                </Col>\n              ))}\n            </Row>\n          </div>\n\n          {isSold ? (\n            <div className=\"d-flex m-2 justify-content-center\">\n              <button\n                className={`btn ${isOwner ? \"btn-danger\" : \"btn-secondary\"}`}\n              >\n                {isOwner ? \"Bought\" : \"Sold\"}\n              </button>\n            </div>\n          ) : (\n            <div className=\"d-flex m-2 justify-content-center\">\n              <button onClick={purchaseItem} className=\"btn btn-primary\">\n                Buy\n              </button>\n            </div>\n          )}\n        </Card.Body>\n      </Card>\n    </Col>\n  );\n};\n\nNftCard.propTypes = {\n  // props passed into this component\n  nft: PropTypes.instanceOf(Object).isRequired,\n};\n\nexport default NftCard;\n","import React from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nconst Loader = () => (\n  <div className=\"d-flex justify-content-center\">\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n      <span className=\"visually-hidden\">Loading...</span>\n    </Spinner>\n  </div>\n);\nexport default Loader;\n","import { useContractKit } from \"@celo-tools/use-contractkit\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { toast } from \"react-toastify\";\nimport PropTypes from \"prop-types\";\nimport AddNfts from \"./Add\";\nimport Nft from \"./Card\";\nimport Loader from \"../../ui/Loader\";\nimport { NotificationSuccess, NotificationError } from \"../../ui/Notifications\";\nimport { getNfts, createNft, purchaseItem } from \"../../../utils/minter\";\nimport { Row } from \"react-bootstrap\";\n\nconst NftList = ({ minterContract, marketplaceContract, name }) => {\n  /* performActions : used to run smart contract interactions in order\n   *  address : fetch the address of the connected wallet\n   */\n  const { performActions, address } = useContractKit();\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const getAssets = useCallback(async () => {\n    try {\n      setLoading(true);\n\n      // fetch all nfts from the smart contract\n      const allNfts = await getNfts(minterContract, marketplaceContract);\n      if (!allNfts) return;\n      setNfts(allNfts);\n    } catch (error) {\n      console.log({ error });\n    } finally {\n      setLoading(false);\n    }\n  }, [marketplaceContract, minterContract]);\n\n  const addNft = async (data) => {\n    try {\n      setLoading(true);\n\n      // create an nft functionality\n      await createNft(\n        minterContract,\n        marketplaceContract,\n        performActions,\n        data\n      );\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\n      getAssets();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to create an NFT.\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const buy = async (index, tokenId) => {\n    try {\n      setLoading(true);\n\n      await purchaseItem(\n        minterContract,\n        marketplaceContract,\n        performActions,\n        index,\n        tokenId\n      );\n\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\n      getAssets();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to create an NFT.\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    try {\n      if (address && minterContract) {\n        getAssets();\n      }\n    } catch (error) {\n      console.log({ error });\n    }\n  }, [minterContract, address, getAssets]);\n  if (address) {\n    return (\n      <>\n        {!loading ? (\n          <>\n            <div className=\"d-flex justify-content-between align-items-center mb-4\">\n              <h1 className=\"fs-4 fw-bold mb-0\">{name}</h1>\n\n              <AddNfts save={addNft} address={address} />\n            </div>\n            <Row xs={1} sm={2} lg={3} className=\"g-3  mb-5 g-xl-4 g-xxl-5\">\n              {/* display all NFTs */}\n              {nfts.map((_nft) => (\n                <Nft\n                  key={_nft.index}\n                  purchaseItem={() => buy(_nft.index, _nft.tokenId)}\n                  nft={{\n                    ..._nft,\n                  }}\n                  isOwner={_nft.owner === address}\n                  isSold={_nft.sold}\n                />\n              ))}\n            </Row>\n          </>\n        ) : (\n          <Loader />\n        )}\n      </>\n    );\n  }\n  return null;\n};\n\nNftList.propTypes = {\n  // props passed into this component\n  minterContract: PropTypes.instanceOf(Object),\n  marketplaceContract: PropTypes.instanceOf(Object),\n  updateBalance: PropTypes.func.isRequired,\n};\n\nNftList.defaultProps = {\n  minterContract: null,\n  marketplaceContract: null,\n};\n\nexport default NftList;\n","import React from \"react\";\nimport Cover from \"./components/minter/Cover\";\nimport {Notification} from \"./components/ui/Notifications\";\nimport Wallet from \"./components/Wallet\";\nimport {useBalance, useMinterContract, useMarketplaceContract} from \"./hooks\";\nimport Nfts from \"./components/minter/nfts\";\nimport {useContractKit} from \"@celo-tools/use-contractkit\";\nimport \"./App.css\";\nimport {Container, Nav} from \"react-bootstrap\";\n\nconst App = function AppWrapper() {\n  \n    const {address, destroy, connect} = useContractKit();\n    const {balance, getBalance} = useBalance();\n\n    // initialize the NFT mint contract\n    const minterContract = useMinterContract();\n\n     // initialize the NFT marketplace contract\n     const marketplaceContract = useMarketplaceContract();\n\n    return (\n        <>\n            <Notification/>\n\n            {address ? (\n                <Container fluid=\"md\">\n                    <Nav className=\"justify-content-end pt-3 pb-5\">\n                        <Nav.Item>\n\n                            {/*display user wallet*/}\n                            <Wallet\n                                address={address}\n                                amount={balance.CELO}\n                                symbol=\"CELO\"\n                                destroy={destroy}\n                            />\n                        </Nav.Item>\n                    </Nav>\n                    <main>\n\n                        {/*list NFTs*/}\n                        <Nfts\n                            name=\"Sneakers Marketplace\"\n                            updateBalance={getBalance}\n                            minterContract={minterContract}\n                            marketplaceContract={marketplaceContract}\n                        />\n                    </main>\n                </Container>\n            ) : (\n                //  if user wallet is not connected display cover page\n                <Cover name=\"Sneakers Marketplace\" coverImg=\"https://media.voguebusiness.com/photos/60140c4680e198421a9ec8d1/master/pass/sneakers-sustainability-voguebus-janine-abrenilla-jan-21-promo.jpg\" connect={connect}/>\n            )}\n        </>\n    );\n};\n\nexport default App;","import { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nexport const useBalance = () => {\n  const { address, kit } = useContractKit();\n  const [balance, setBalance] = useState(0);\n\n  const getBalance = useCallback(async () => {\n    // fetch a connected wallet token balance\n    const value = await kit.getTotalBalance(address);\n    setBalance(value);\n  }, [address, kit]);\n\n  useEffect(() => {\n    if (address) getBalance();\n  }, [address, getBalance]);\n\n  return {\n    balance,\n    getBalance,\n  };\n};\n","import { useContract } from \"./useContract\";\nimport MyNFTAbi from \"../contracts/MyNFT.json\";\nimport MyNFTContractAddress from \"../contracts/MyNFT-address.json\";\n\nexport const useMinterContract = () =>\n  useContract(MyNFTAbi.abi, MyNFTContractAddress.MyNFT);","import { useContract } from \"./useContract\";\nimport NFTMarketplaceAbi from \"../contracts/NFTMarketplace.json\";\nimport NFTMarketplace from \"../contracts/NFTMarketplace-address.json\";\n\nexport const useMarketplaceContract = () =>\n  useContract(NFTMarketplaceAbi.abi, NFTMarketplace.NFTMarketplace);\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  ContractKitProvider,\n  Alfajores,\n  NetworkNames,\n} from \"@celo-tools/use-contractkit\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContractKitProvider\n      networks={[Alfajores]}\n      network={{\n        name: NetworkNames.Alfajores,\n        rpcUrl: \"https://alfajores-forno.celo-testnet.org\",\n        graphQl: \"https://alfajores-blockscout.celo-testnet.org/graphiql\",\n        explorer: \"https://alfajores-blockscout.celo-testnet.org\",\n        chainId: 44787,\n      }}\n      dapp={{\n        name: \"Sneaker NFT Marketplace\",\n        description: \"A React Daap for selling virtual sneaker nfts\",\n      }}\n    >\n      <App />\n    </ContractKitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}